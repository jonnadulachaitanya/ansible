- name: create ec2 instance and route53
  hosts: local
  connection: local
  vars:
    subnet_id: "subnet-056ed6edf435f4469"
    instance_type: "t2.micro"
    image_id: "ami-09c813fb71547fc4f"
    security_group: "sg-0964d745c1e62cc99"
    zone: "chaitanyaproject.online"

    instances: 
    - mysql
    - frontend
    - backend

  tasks: 
  - name: installing python dependencies boto3 and botocore
    ansible.builtin.pip:
      name:
      - boto3
      - botocore
      executable: pip3.9
  - name: create ec2
    amazon.aws.ec2_instance: 
      name: "{{ item }}"
      vpc_subnet_id: "{{ subnet_id }}"
      instance_type: "{{ instance_type }}"
      image_id: "{{ image_id }}"
      security_group: "{{ security_group }}"

    loop: "{{ instances }}"
    register: ec2_instances

  - name: print the instance details
    ansible.builtin.debug:
      msg: "{{ ec2_instances }}"

  - name: create route53
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}" #chaitanyaproject.online
      value: "{{ item.instances[0].private_ip_address}}"
      record: "{{ item.item }}.{{ zone }}"  #backend, mysql, frontend.chaitanyaproject.online
      type: A
      ttl: 1
      wait: true
      overwrite: true
    loop: "{{ ec2_instances.results }}" #based on output from ec2instances, we writtened this loop

  - name: create route53 for public
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      value: "{{ item.instances[0].public_ip_address }}"
      record: "{{ zone }}" #fchaitanyaproject.online
      type: A
      ttl: 1
      wait: true
      overwrite: true #it will replaces with new if any old route is there
    loop: "{{ ec2_instances.results }}"
    when: item.item == "frontend" #it will run when it is matches

